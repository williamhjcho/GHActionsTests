# Generates a new release when a PR is merged at master
# It detects a PR with title: 'Release "x.y.z"'
#
# References:
# - contexts & expression syntax: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#job-context
# - github-script: https://github.com/marketplace/actions/github-script
name: release

on:
  pull_request:
    branches: [ master ]
    # types: [ closed ]
    types: [ closed, edited, opened, reopened, synchronize ]

jobs:
  verify:
    # if: github.event.pull_request.merged
    runs-on: ubuntu-latest

    env:
      # matches 'Release "x.y.z"', the lookarounds are used as anchors
      # the release version will be the one matched inside the first double quoted section
      RELEASE_TITLE_PATTERN: '(?<=^Release ")(.+?)(?=")'

    outputs:
      release-name: ${{ steps.get-release-name.outputs.name }}

    steps:
      # doing a perl-style regex match on the pull request's title
      # if this step fails, then no release is dispatched
      - name: Get release name
        id: get-release-name
        run: |
          RELEASE_NAME=$(echo '${{ github.event.pull_request.title }}' | grep -ioP --max-count=1 '${{ env.RELEASE_TITLE_PATTERN }}' || echo '')
          echo "::set-output name=name::$RELEASE_NAME"

  release:
    needs: [ verify ]
    runs-on: ubuntu-latest
    if: ${{ needs.verify.outputs.release-name != '' }}

    env:
      RELEASE_BRANCH: 'release'
      RELEASE_NAME: ${{ needs.verify.outputs.release-name }}

    steps:
      - uses: actions/checkout@v2

      - name: Dump
        run: |
          echo ">>$RELEASE_NAME<<"
          echo "dart cli release generate $RELEASE_NAME ${{ github.sha }} --base $RELEASE_BRANCH"

      - name: Merge
        uses: actions/github-script@v3
        id: merge
        with:
          github-token: ${{ github.token }}
          script: |
            // merging
            console.log(`Merging "${{ github.sha }}" into "$${{ env.RELEASE_BRANCH }}"`)
            //const result = await github.repos.merge({
            //  owner: context.repo.owner,
            //  repo: context.repo.repo,
            //  base: ${{ env.RELEASE_BRANCH }},
            //  head: ${{ github.sha }},
            //  commit_message: `[Automated] Release "${{ env.RELEASE_NAME }}"`,
            //});
            const result = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            if (result.status == 200) {
              console.log(`Merged ${result.data.sha}`)
              core.setOutput('merge_commit', result.data);
            } else {
              core.setFailed('Merging failed:\n${result.data.message}');
            }

      - name: Generate new release
        uses: actions/github-script@v3
        id: release
        with:
          github-token: ${{ github.token }}
          script: |
            console.log(`${{ steps.merge.outputs.merge_commit.tag_name }}`);

      # - name: Generate new release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ env.RELEASE_NAME }}
      #     release_name: 'Release "${{ env.RELEASE_NAME }}"'
      #     body: ${{ github.event.pull_request.body }}
      #     # TODO: use the release branch commit SHA rather than the branch itself
      #     commitish: ${{ env.RELEASE_BRANCH }}
      #     draft: true
      #     prerelease: false
