# Generates a new release when a PR is merged at master
# It detects a PR with title: 'Release "x.y.z"'
#
# References:
# - contexts & expression syntax: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#job-context
# - github-script: https://github.com/marketplace/actions/github-script
name: release

on:
  pull_request:
    branches: [ master ]
    types: [ closed ]

  workflow_dispatch:
    inputs:
      environment:
        description: "The flavor/scheme used (all*|staging|prod)"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - staging
          - prod
      platforms:
        description: "Which platforms (all*|android|ios)"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - android
          - ios
      bump_type:
        description: "Which bump type (patch*|minor|major)"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  setup:
#    if: github.event.pull_request.merged
    runs-on: ubuntu-latest

    env:
      # matches 'Release "x.y.z"', the lookarounds are used as anchors
      # the release version will be the one matched inside the first double quoted section
      RELEASE_TITLE_PATTERN: '(?<=^Release ")(.+?)(?=")'

    outputs:
      release-name: ${{ steps.get-release-name.outputs.name }}
      environments: ${{ steps.set-matrix.outputs.environments }}
      platforms: ${{ steps.set-matrix.outputs.platforms }}

    steps:
      # doing a perl-style regex match on the pull request's title
      # if this step fails, then no release is dispatched
      - name: Get release name
        id: get-release-name
        run: |
          RELEASE_NAME=$(echo '${{ github.event.pull_request.title }}' | grep -ioP --max-count=1 '${{ env.RELEASE_TITLE_PATTERN }}' || echo '')
          echo "::set-output name=name::$RELEASE_NAME"
      - name: Setup environments
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "all" || "${{ github.event.schedule }}" == "05 19 * * WED" ]]; then
            echo "environments=['prod','staging']" >> $GITHUB_OUTPUT
          else
            echo "environments=['${{ github.event.inputs.environment }}']" >> $GITHUB_OUTPUT
          fi
          
          if [[ "${{ github.event.inputs.platforms }}" == "all" || "${{ github.event.schedule }}" == "05 19 * * WED" ]]; then
            echo "platforms=['ios','android']" >> $GITHUB_OUTPUT
          else
            echo "platforms=['${{ github.event.inputs.platforms }}']" >> $GITHUB_OUTPUT
          fi
      - name: Print
        run: |
          echo "environments='${{ steps.set-matrix.outputs.environments }}'"
          echo "platforms='${{ steps.set-matrix.outputs.platforms }}'"

  release-apple:
    needs: [ setup ]
    runs-on: ubuntu-latest
    if: contains(needs.setup.outputs.platforms, 'ios')
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.setup.outputs.environments) }}
        platform: [ 'ios' ]
    steps:
      - name: Check
        run: echo "ENVIRONMENT=${{ matrix.environment }} and PLATFORM=${{ matrix.platform }}"

  release-google:
    needs: [ setup ]
    runs-on: ubuntu-latest
    if: contains(needs.setup.outputs.platforms, 'android')
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.setup.outputs.environments) }}
        platform: [ 'android' ]
    steps:
      - name: Check
        run: echo "ENVIRONMENT=${{ matrix.environment }} and PLATFORM=${{ matrix.platform }}"


  release:
    needs: [ setup ]
    runs-on: ubuntu-latest
#    if: ${{ needs.setup.outputs.release-name != '' }}
    if: false

    env:
      RELEASE_BRANCH: 'release'
      RELEASE_NAME: ${{ needs.setup.outputs.release-name }}

    steps:
      - uses: actions/checkout@v2
      - name: Merge & Release
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            console.log(`Merging "${{ github.sha }}" into "$${{ env.RELEASE_BRANCH }}"`);
            var result = await github.repos.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: `${{ env.RELEASE_BRANCH }}`,
              head: `${{ github.sha }}`,
              commit_message: `[Automated] Release "${{ env.RELEASE_NAME }}"`,
            });

            if (result.status != 201) {
              core.setFailed(`Merging failed:\n${result.data.message}`);
              return;
            }
            const mergeCommit = result.data;
            console.log(`Merged ${mergeCommit.sha}`)

            console.log(`Releasing "${{ env.RELEASE_NAME }}" with ${mergeCommit.sha}`);
            result = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${{ env.RELEASE_NAME }}`,
              name: `Release "${{ env.RELEASE_NAME }}"`,
              body: `${{ github.event.pull_request.body }}`,
              target_commitish: mergeCommit.sha,
              draft: true,
            });
            if (result.status != 201) {
              core.setFailed(`Release failed:\n${result.data.message}`);
              return;
            }
            console.log(`Release "${{ env.RELEASE_NAME }}" created`);
