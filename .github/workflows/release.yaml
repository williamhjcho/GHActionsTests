# Generates a new release when a PR is merged at master
# It detects a PR with title: 'Release "x.y.z"'
#
# References:
# - contexts & expression syntax: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#job-context
# - github-script: https://github.com/marketplace/actions/github-script
name: release

on:
  pull_request:
    branches: [ master ]
    types: [ closed ]

jobs:
  verify:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest

    env:
      # matches 'Release "x.y.z"', the lookarounds are used as anchors
      # the release version will be the one matched inside the first double quoted section
      RELEASE_TITLE_PATTERN: '(?<=^Release ")(.+?)(?=")'

    outputs:
      release-name: ${{ steps.get-release-name.outputs.name }}

    steps:
      # doing a perl-style regex match on the pull request's title
      # if this step fails, then no release is dispatched
      - name: Get release name
        id: get-release-name
        run: |
          RELEASE_NAME=$(echo '${{ github.event.pull_request.title }}' | grep -ioP --max-count=1 '${{ env.RELEASE_TITLE_PATTERN }}' || echo '')
          echo "::set-output name=name::$RELEASE_NAME"

  release:
    needs: [ verify ]
    runs-on: ubuntu-latest
    if: ${{ needs.verify.outputs.release-name != '' }}

    env:
      RELEASE_BRANCH: 'release'
      RELEASE_NAME: ${{ needs.verify.outputs.release-name }}

    steps:
      - uses: actions/checkout@v2

      - name: Merge & Release
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            console.log(`Merging "${{ github.sha }}" into "$${{ env.RELEASE_BRANCH }}"`);
            var result = await github.repos.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: `${{ env.RELEASE_BRANCH }}`,
              head: `${{ github.sha }}`,
              commit_message: `[Automated] Release "${{ env.RELEASE_NAME }}"`,
            });

            if (result.status != 201) {
              core.setFailed(`Merging failed:\n${result.data.message}`);
              return;
            }
            const mergeCommit = result.data;
            console.log(`Merged ${mergeCommit.sha}`)

            console.log(`Releasing "${{ env.RELEASE_NAME }}" with ${mergeCommit.sha}`);
            result = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${{ env.RELEASE_NAME }}`,
              name: `Release "${{ env.RELEASE_NAME }}"`,
              body: `${{ github.event.pull_request.body }}`,
              target_commitish: mergeCommit.sha,
              draft: true,
            });
            if (result.status != 201) {
              core.setFailed(`Release failed:\n${result.data.message}`);
              return;
            }
            console.log(`Release "${{ env.RELEASE_NAME }}" created`);
